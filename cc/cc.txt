123



param = {'Coordinates': result_file_identify['parameters']['Coordinates'],
                'Decimal_numbers': result_file_identify['parameters']['Decimal_numbers'],
                'Number_format_decimal': result_file_identify['parameters']['Number_format_decimal'],
                'Number_format_integer': result_file_identify['parameters']['Number_format_integer'],
                'data_type': result_file_identify['parameters']['data_type'],
                'file_size': result_file_identify['parameters']['file_size'],
                'format': result_file_identify['parameters']['format'],
                'max_numbers': result_file_identify['parameters']['max_numbers'],
                'min_numbers': result_file_identify['parameters']['min_numbers'],
                'offset_numbers': result_file_identify['parameters']['offset_numbers'],
                'separator_char': result_file_identify['parameters']['separator_char'],
                'text_line_width': result_file_identify['parameters']['text_line_width'],
                'tool_units': result_file_identify['parameters']['tool_units'],
                'units': result_file_identify['parameters']['units'],
                'zeroes_omitted':result_file_identify['parameters']['zeroes_omitted']
                }


{'format': 'Gerber274x', 'name': 'Znn-2786693_st.gbr', 'parameters': {'Coordinates': 'Incremental', 'Decimal_numbers': True, 'Number_format_decimal': 3, 'Number_format_integer': 3, 'data_type': 'Ascii', 'fi
le_size': 60795.0, 'format': 'Gerber274x', 'max_numbers': {'first': 348000016.5291131, 'second': 331328015.7372355}, 'min_numbers': {'first': 0.0, 'second': 0.0}, 'offset_numbers': {'first': 0.0, 'second':
0.0}, 'separator_char': '*', 'text_line_width': 0.0, 'tool_units': ' ', 'units': 'MM', 'zeroes_omitted': 'Leading'}}





# 先看一下-com层是不是空的，如果是空的说明比对操作失败。
'COM info, out_file={}/{}_com_features_count.txt,args=  -t layer -e {}/{}/{} -m display -d FEATURES\nsource {}/{}_com_features_count.txt'.format(
                result_path_remote,self.layer1,self.job1,self.step1,self.layer1+'-com',result_path_remote,self.layer1
            ),

# 先看一下-com层是不是空的，如果是空的说明比对操作失败。
        with open(os.path.join(result_path_local,self.layer1 + '_com_features_count.txt'), 'r') as f:
            layer_com_count = len(f.readlines())
        if layer_com_count < 2:
            print("比对异常！未能比对！")
            result = '错误'
            return result



 # each_dict_para['zeroes'] = layer_e2.zeroes_omitted.values[0].lower()
                # each_dict_para['nf1'] = int(layer_e2.number_format_A.values[0])
                # each_dict_para['nf2'] = int(layer_e2.number_format_B.values[0])
                # each_dict_para['units'] = layer_e2.units.values[0].lower()
                # # g软件的tool_units没有mils选项
                # if layer_e2.tool_units_g.values[0].lower() == 'mils':
                #     each_dict_para['tool_units'] = 'inch'
                # else:
                #     each_dict_para['tool_units'] = layer_e2.tool_units_g.values[0].lower()


# ----------------------------------------开始用EP软件比图，g和g2--------------------------------------------------
        # all_result_ep_vs_g_g2 = {}
        # # 打开job_g
        # # 前面打开过的。直接show下看看
        # # GUI.show_layer(job_g, 'orig', 'top')
        #
        # # 打开 job_g2
        # #先解压tgz
        # CompressTool.untgz(os.path.join(temp_g2_path, os.listdir(temp_g2_path)[0]),temp_g2_path)
        # Input.open_job(job_g2, temp_g2_path)
        # # GUI.show_layer(job_g2, 'orig', 'top')
        #
        # # 开始用kernel比对
        # for each_layer_g in all_layers_list_job_g:
        #     print('EP VS'.center(192,'-'))
        #     print('层名称：',each_layer_g)
        #     ep_layer_compare_result = BASE.layer_compare_point(job_g, 'orig', each_layer_g, job_g2, 'orig', each_layer_g, 22860,True, True, 5080000)
        #     ep_layer_compare_result = json.loads(ep_layer_compare_result)
        #     print(ep_layer_compare_result)
        #     print(len(ep_layer_compare_result['result']))
        #     if len(ep_layer_compare_result['result']) > 0:
        #         all_result_ep_vs_g_g2[each_layer_g] = '错误'
        #         print('错误！')
        #         # Layers.layer_compare(job_g, 'orig', each_layer_g, job_g2, 'orig', each_layer_g, 22860,True, True, each_layer_g + '-com', 5080000)
        #         # GUI.show_layer(job_g, 'orig', each_layer_g)
        #     if len(ep_layer_compare_result['result']) == 0:
        #         all_result_ep_vs_g_g2[each_layer_g] = '正常'
        #         print('正常！')
        #
        # assert len(all_result_ep_vs_g_g2) == len(all_layers_list_job_g)



class GInput(object):
    def __init__(self, *, job: str,step='orig',gerberList_path:list,out_path, job_id, drill_para,
                 layer_info_from_obj='dms',
                 layer_list:list,gerber_layer_list:list,drill_layer_list:list,rout_layer_list:list):
        self.g = RunConfig.driver_g
        self.job = job
        self.step = step
        self.gerberList_path = gerberList_path
        self.out_path = out_path
        self.job_id = job_id
        self.drill_para = drill_para
        self.layer_info_from_obj = layer_info_from_obj

        if layer_info_from_obj == 'job_tgz_file':
            self.layers = layer_list
            self.gerber_layers = gerber_layer_list
            self.drill_layers = drill_layer_list
            self.rout_layers = rout_layer_list

        self.get_current_job_layer_type(layer_info_from_obj)

        self.set_para_default()

        kw = {}
        kw['layer_info_from_obj'] = self.layer_info_from_obj
        kw['drill_para'] = self.drill_para
        self.in_put(self.job,self.step,self.gerberList_path,self.out_path,self.job_id,self.drill_para,self.layer_info_from_obj,**kw)

    def set_para_default(self):
        # 设置默认导入参数
        with open(RunConfig.config_g_input, 'r') as cfg:
            self.para = json.load(cfg)['input']  # (json格式数据)字符串 转化 为字典
            print("self.para::",self.para)

    def set_para_customer(self,customer_para:dict):
        pass
        print('customer_para:',customer_para)
        for each in customer_para:
            print(each)
            self.para[each] = customer_para[each]
        print(self.para)
        print("cc")

    def get_current_job_layer_type(self,layer_info_from_obj):
        if layer_info_from_obj == 'dms':
            pass

    def in_put(self,job_name, step, gerberList_path, out_path,job_id,*args,**kwargs):
        # 先创建job, step
        jobpath = r'C:\genesis\fw\jobs' + '/' + job_name
        results = []
        if os.path.exists(jobpath):
            shutil.rmtree(jobpath)
        self.g.Create_Entity(job_name, step)
        for gerberPath in gerberList_path:
            result = {'gerber': gerberPath}
            self.para['path'] = gerberPath
            self.para['layer'] = os.path.basename(gerberPath).lower()
            ret = self.gerber_to_odb_one_file(job_id,*args,**kwargs)
            result['result'] = ret
            results.append(result)
        self.g.save_job(self.job)
        return results

    def gerber_to_odb_one_file(self, job_id,*args,**kwargs):
        self.para['job'] = self.job
        self.para['step'] = self.step
        self.para['format'] = 'Gerber274x'
        self.para['separator'] = '*'
        self.para['layer']=self.para['layer'].replace(' ','-').replace('(', '-').replace(')', '-')

        print("iamcc",'kwargs:',kwargs)
        layer_info_from_obj = kwargs.get('layer_info_from_obj', None)
        if layer_info_from_obj == 'job_tgz_file':
            print(layer_info_from_obj)
            print('layer:',self.para['layer'])
            if self.para['layer'] not in self.gerber_layers:
                print("iamdrill")
                self.para['format'] = 'Excellon2'
                if 'drill_para' in kwargs:
                    if kwargs['drill_para'] == 'epcam_default':
                        self.para['units'] = 'inch'
                        self.para['zeroes'] = 'none'
                        self.para['nf1'] = "2"
                        self.para['nf2'] = "6"
                        self.para['tool_units'] = 'mm'
                        self.para['separator'] = 'nl'

        if layer_info_from_obj == 'dms':
            try:
                print("开始定位".center(198,"*"))
                print(self.para['path'].replace(' ', '-').replace('(', '-').replace(')', '-'))
                print(os.path.basename(self.para['path']).replace(' ', '-').replace('(', '-').replace(')', '-'))
                layer_e2=DMS().get_job_layer_fields_from_dms_db_pandas_one_layer(job_id,filter=os.path.basename(self.para['path']).replace(' ', '-').replace('(', '-').replace(')', '-'))
                if layer_e2.status.values[0] == 'published' and layer_e2.layer_file_type.values[0]=='excellon2':
                    print("我是Excellon2!!!!!")
                    format='Excellon2'
                    if 'drill_para' in kwargs:
                        # print("drill_para2:", kwargs['drill_para'])
                        if kwargs['drill_para'] == 'epcam_default':
                            self.para['units'] = 'inch'
                            self.para['zeroes'] = 'none'
                            self.para['nf1'] = "2"
                            self.para['nf2'] = "4"
                            self.para['tool_units'] = 'mm'
                            self.para['separator'] = 'nl'
                        elif kwargs['drill_para'] == 'from_dms':
                            self.para['units']=layer_e2.units_g.values[0].lower()
                            self.para['zeroes']=layer_e2.zeroes_omitted_g.values[0].lower()
                            self.para['nf1'] = int(layer_e2.number_format_A_g.values[0])
                            self.para['nf2'] = int(layer_e2.number_format_B_g.values[0])
                            #g软件的tool_units没有mils选项
                            if layer_e2.tool_units_g.values[0].lower() == 'mils':
                                self.para['tool_units'] = 'inch'
                            else:
                                self.para['tool_units'] = layer_e2.tool_units_g.values[0].lower()

                    self.para['separator']='nl'
                else:
                    print("我不是孔Excellon2!")

                print("结束定位".center(198,"*"))
            except:
                print("有异常啊！")


        trans_COM = 'COM input_manual_set,'
        trans_COM += 'path={},job={},step={},format={},data_type={},units={},coordinates={},zeroes={},'.format(
            self.para['path'].replace("\\","/"),
            self.para['job'],
            self.para['step'],
            self.para['format'],
            self.para['data_type'],
            self.para['units'],
            self.para['coordinates'],
            self.para['zeroes'])
        trans_COM += 'nf1={},nf2={},decimal={},separator={},tool_units={},layer={},wheel={},wheel_template={},'.format(
            self.para['nf1'],
            self.para['nf2'],
            self.para['decimal'],
            self.para['separator'],
            self.para['tool_units'],
            self.para['layer'],
            self.para['wheel'],
            self.para['wheel_template'])
        trans_COM += 'nf_comp={},multiplier={},text_line_width={},signed_coords={},break_sr={},drill_only={},'.format(
            self.para['nf_comp'],
            self.para['multiplier'],
            self.para['text_line_width'],
            self.para['signed_coords'],
            self.para['break_sr'],
            self.para['drill_only'])
        trans_COM += 'merge_by_rule={},threshold={},resolution={}'.format(
            self.para['merge_by_rule'],
            self.para['threshold'],
            self.para['resolution'])



        cmd_list1 = [
            'COM input_manual_reset',
            trans_COM,
            ('COM input_manual,script_path={}'.format(''))
        ]


        for cmd in cmd_list1:
            print(cmd)
            ret = self.g.exec_cmd(cmd)
            if ret != 0:
                print('inner error')
                return False
        return True



